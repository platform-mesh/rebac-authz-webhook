// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/api/meta"
	"sigs.k8s.io/controller-runtime/pkg/cluster"
)

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// Engage provides a mock function for the type Provider
func (_mock *Provider) Engage(context1 context.Context, s string, cluster1 cluster.Cluster) error {
	ret := _mock.Called(context1, s, cluster1)

	if len(ret) == 0 {
		panic("no return value specified for Engage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, cluster.Cluster) error); ok {
		r0 = returnFunc(context1, s, cluster1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Provider_Engage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Engage'
type Provider_Engage_Call struct {
	*mock.Call
}

// Engage is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - cluster1 cluster.Cluster
func (_e *Provider_Expecter) Engage(context1 interface{}, s interface{}, cluster1 interface{}) *Provider_Engage_Call {
	return &Provider_Engage_Call{Call: _e.mock.On("Engage", context1, s, cluster1)}
}

func (_c *Provider_Engage_Call) Run(run func(context1 context.Context, s string, cluster1 cluster.Cluster)) *Provider_Engage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 cluster.Cluster
		if args[2] != nil {
			arg2 = args[2].(cluster.Cluster)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Provider_Engage_Call) Return(err error) *Provider_Engage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Provider_Engage_Call) RunAndReturn(run func(context1 context.Context, s string, cluster1 cluster.Cluster) error) *Provider_Engage_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Provider
func (_mock *Provider) Get(s string) (meta.RESTMapper, bool) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 meta.RESTMapper
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (meta.RESTMapper, bool)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) meta.RESTMapper); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meta.RESTMapper)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// Provider_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Provider_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - s string
func (_e *Provider_Expecter) Get(s interface{}) *Provider_Get_Call {
	return &Provider_Get_Call{Call: _e.mock.On("Get", s)}
}

func (_c *Provider_Get_Call) Run(run func(s string)) *Provider_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Provider_Get_Call) Return(rESTMapper meta.RESTMapper, b bool) *Provider_Get_Call {
	_c.Call.Return(rESTMapper, b)
	return _c
}

func (_c *Provider_Get_Call) RunAndReturn(run func(s string) (meta.RESTMapper, bool)) *Provider_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type Provider
func (_mock *Provider) Start(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Provider_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Provider_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Provider_Expecter) Start(context1 interface{}) *Provider_Start_Call {
	return &Provider_Start_Call{Call: _e.mock.On("Start", context1)}
}

func (_c *Provider_Start_Call) Run(run func(context1 context.Context)) *Provider_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Provider_Start_Call) Return(err error) *Provider_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Provider_Start_Call) RunAndReturn(run func(context1 context.Context) error) *Provider_Start_Call {
	_c.Call.Return(run)
	return _c
}
